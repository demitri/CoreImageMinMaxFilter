

kernel vec4 nl_minimum_filter(sampler src_image) // sampler destSampler,
{
	vec2 i = destCoord(); // location of this pixel in output image (current location in destination space)

	// sample(image, vec2(position)) -> image texturing from

	// grab 2x2 square of pixels from source image that this pixel maps to
	// (unpremultiply probably unnecessary since alpha values are always either 0 or 1).
	//
	vec4 p1 = unpremultiply(sample(src_image, vec2(2.0 * i.x      , 2.0 * i.y      )));
	vec4 p2 = unpremultiply(sample(src_image, vec2(2.0 * i.x      , 2.0 * i.y + 1.0)));
	vec4 p3 = unpremultiply(sample(src_image, vec2(2.0 * i.x + 1.0, 2.0 * i.y      )));
	vec4 p4 = unpremultiply(sample(src_image, vec2(2.0 * i.x + 1.0, 2.0 * i.y + 1.0)));

/*
	// This is the approach if we are applying any transformations to the source image,
	// which we are not.

	vec2 pix1 = samplerTransform(src_image, vec2(2.0 * i.x      , 2.0 * i.y      ));
	vec2 pix2 = samplerTransform(src_image, vec2(2.0 * i.x      , 2.0 * i.y + 1.0));
	vec2 pix3 = samplerTransform(src_image, vec2(2.0 * i.x + 1.0, 2.0 * i.y      ));
	vec2 pix4 = samplerTransform(src_image, vec2(2.0 * i.x + 1.0, 2.0 * i.y      ));

	vec4 p1 = unpremultiply(sample(src_image, pix1));
	vec4 p2 = unpremultiply(sample(src_image, pix2));
	vec4 p3 = unpremultiply(sample(src_image, pix3));
	vec4 p4 = unpremultiply(sample(src_image, pix4));
*/
	float minValue = p1.r;

	// compare all pixels, excluding pixels that are ouside of source image
	//
	//minValue = p2.r < minValue && p2.a > 0 ? p2.r : minValue; // pixels outside of extent have a = 0
	//minValue = p3.r < minValue && p3.a > 0 ? p3.r : minValue;
	//minValue = p4.r < minValue && p4.a > 0 ? p4.r : minValue;

	minValue = p2.a > 0.0 ? min(minValue, p2.r) : minValue;
	minValue = p3.a > 0.0 ? min(minValue, p3.r) : minValue;
	minValue = p4.a > 0.0 ? min(minValue, p4.r) : minValue;

	// don't need to premultiply as alpha = 1

	//return vec4(3, 3, 3, 1); // -> returns min/max of 1; seems to expect range of [0,1]
	//return vec4(0.25, 0.25, 0.25, 1); // -> returns 0.6804 as min/max; precision not very high? ints from 0-255?
	return vec4(minValue, minValue, minValue, 1);
}

